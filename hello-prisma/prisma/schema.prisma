generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique(map: "user.email_unique")
  username     String         @unique
  name         String
  role         String
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  posts        Post[]
  sessions     Session[]
  chats        Chat[]
  Notification Notification[]
  Wishlist     Wishlist[]
  Coupon       Coupon[]
  Address      Address[]
  Cart         Cart[]
  Review       Review[]
  Store        Store[]
  Order        Order[]
}

model Session {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  expirationDate DateTime
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [storeId], references: [id])
  storeId   String  @default(uuid()) @map("store_id")
}

// TODO: Store, Product, Category, Order, OrderItem, Review, Cart, CartItem, Address, Payment,
// TODO: Shipment, Inventory, Supplier, Discount, Coupon, Wishlist, Notification, Message,
// TODO: Role, Permission,

model Store {
  id        String    @id @default(uuid())
  name      String
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String
  products  Product[]
  address   Address?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  Order Order[]
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String?
  price       Float
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  String?
  store       Store      @relation(fields: [storeId], references: [id])
  storeId     String
  inventory   Inventory?
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  Wishlist Wishlist[]

  Discount Discount[]

  Supplier Supplier[]

  CartItem CartItem[]

  OrderItem OrderItem[]
}

model Category {
  id        String    @id @default(uuid())
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  store     Store?      @relation(fields: [storeId], references: [id])
  storeId   String?
  items     OrderItem[]
  payment   Payment?
  shipment  Shipment?
  status    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Address {
  id      String  @id @default(uuid())
  user    User?   @relation(fields: [userId], references: [id])
  userId  String? @unique
  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String? @unique
  street  String
  city    String
  state   String
  zip     String
  country String

  Shipment Shipment[]
}

model Payment {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  amount    Float
  method    String
  status    String
  createdAt DateTime @default(now())
}

model Shipment {
  id        String    @id @default(uuid())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String    @unique
  address   Address?  @relation(fields: [addressId], references: [id])
  addressId String?
  status    String
  shippedAt DateTime?
}

model Inventory {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @unique
  quantity  Int
  updatedAt DateTime @updatedAt
}

model Supplier {
  id       String    @id @default(uuid())
  name     String
  products Product[]
  contact  String?
}

model Discount {
  id        String    @id @default(uuid())
  code      String    @unique
  amount    Float
  expiresAt DateTime?
  products  Product[]

  Coupon Coupon[]
}

model Coupon {
  id         String    @id @default(uuid())
  code       String    @unique
  discount   Discount? @relation(fields: [discountId], references: [id])
  discountId String?
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  expiresAt  DateTime?
}

model Wishlist {
  id       String    @id @default(uuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  products Product[]
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Message {
  id      String   @id @default(uuid())
  content String
  sentAt  DateTime @default(now())
  chat    Chat     @relation(fields: [chatId], references: [id])
  chatId  String   @map("chat_id")
}

model Chat {
  id        String    @id @default(uuid())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique @default("USER")
  permissions Permission[]
}

model Permission {
  id    String @id @default(uuid())
  name  String @unique
  roles Role[]
}
